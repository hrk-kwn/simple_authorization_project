service: simple-authorization-project

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-northeast-1

functions:

  # helloAPI
  hello:
    handler: hello.handler
    events:
      - http:
          path: /hello/
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayWithAuthorizationAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  # 仮登録API
  tmp:
    handler: entry_tmp.handler
    events:
      - http:
          path: /entry/tmp/
          method: post

  # 本登録API
  prd:
    handler: entry_prd.handler
    events:
      - http:
          path: /entry/prd/
          method: post

  # ログインAPI
  login:
    handler: login.handler
    events:
      - http:
          path: /login/
          method: post

resources:
  Resources:
    ApiGatewayWithAuthorizationUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: 'verified_email'
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          InviteMessageTemplate:
            EmailMessage: 'Your username is {username} and temporary password is {####}.'
            EmailSubject: 'Your temporary password'
            SMSMessage: 'Your username is {username} and temporary password is {####}.'
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: false
          DeviceOnlyRememberedOnUserPrompt: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        EmailVerificationMessage: 'Your verification code is {####}.'
        EmailVerificationSubject: 'Your verification code'
        MfaConfiguration: OFF
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 365
        Schema:
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: email
            Required: true
        SmsAuthenticationMessage: 'Your verification code is {####}.'
        SmsVerificationMessage: 'Your verification code is {####}.'
        UsernameConfiguration:
          CaseSensitive: true
        UserPoolAddOns:
          AdvancedSecurityMode: AUDIT
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        UserPoolTags:
          Service: ${self:service}-${self:provider.stage}
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE #
          EmailMessage: 'Your verification code is {####}.'
          EmailSubject: 'Your verification code'
          SmsMessage: 'Your verification code is {####}.'

    ApiGatewayWithAuthorizationUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        CallbackURLs:
          - 'http://localhost:3000'
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        DefaultRedirectURI: 'http://localhost:3000'
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        LogoutURLs:
          - 'http://localhost:3000'
        PreventUserExistenceErrors: ENABLED
        ReadAttributes:
          - email
        RefreshTokenValidity: 10
        SupportedIdentityProviders:
          - COGNITO
        UserPoolId:
          Ref: ApiGatewayWithAuthorizationUserPool
        WriteAttributes:
          - email

    ApiGatewayWithAuthorizationAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      DependsOn:
        - ApiGatewayRestApi
      Properties:
        Name: ApiGatewayWithAuthorizationAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ ApiGatewayWithAuthorizationUserPool, Arn ]

  Outputs:
    CognitoUserPoolId:
      Value:
        Ref: ApiGatewayWithAuthorizationUserPool
    CognitoUserPoolIdARN:
      Value: { Fn::GetAtt: [ ApiGatewayWithAuthorizationUserPool, Arn ] }
    CognitoUserPoolClientId:
      Value:
        Ref: ApiGatewayWithAuthorizationUserPoolClient
